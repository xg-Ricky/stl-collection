# Generated by Django 5.2 on 2025-06-02 09:50

from django.db import migrations


def create_tag_types_and_migrate_tags(apps, schema_editor):
    """Create TagType instances and migrate existing tags"""
    TagType = apps.get_model('tags', 'TagType')
    Tag = apps.get_model('tags', 'Tag')
    
    # Define tag types with colors and sort order
    tag_types_data = [
        ('General', 'General purpose tags', '#6c757d', 10),
        ('Genre', 'Game genres and themes', '#007bff', 20),
        ('Miniature', 'Types of miniatures', '#28a745', 30),
        ('Terrain', 'Terrain and scenery', '#ffc107', 40),
        ('Style', 'Art and design styles', '#dc3545', 50),
        ('Faction', 'Armies and factions', '#6f42c1', 60),
        ('Scale', 'Miniature scales', '#fd7e14', 70),
        ('Other', 'Miscellaneous tags', '#20c997', 80),
    ]
    
    # Create TagType instances
    tag_type_objects = {}
    for name, description, color, sort_order in tag_types_data:
        tag_type, created = TagType.objects.get_or_create(
            name=name,
            defaults={
                'description': description,
                'color': color,
                'sort_order': sort_order,
                'is_active': True
            }
        )
        tag_type_objects[name.lower()] = tag_type
    
    # Migrate existing tags from type_old to type ForeignKey
    for tag in Tag.objects.all():
        if tag.type_old and not tag.type:
            # Map old choices to new TagType names
            type_mapping = {
                'general': 'General',
                'genre': 'Genre', 
                'miniature': 'Miniature',
                'terrain': 'Terrain',
                'style': 'Style',
                'faction': 'Faction',
                'scale': 'Scale',
                'other': 'Other',
            }
            
            new_type_name = type_mapping.get(tag.type_old, 'General')
            tag.type = tag_type_objects[new_type_name.lower()]
            tag.save()


def reverse_migration(apps, schema_editor):
    """Reverse the migration by clearing type field and keeping type_old"""
    Tag = apps.get_model('tags', 'Tag')
    TagType = apps.get_model('tags', 'TagType')
    
    # Clear the type field for all tags
    Tag.objects.update(type=None)
    
    # Delete all TagType instances
    TagType.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('tags', '0002_alter_tag_options_tag_type'),
    ]

    operations = [
        migrations.RunPython(create_tag_types_and_migrate_tags, reverse_migration),
    ]
